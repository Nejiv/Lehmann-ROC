# LEHMANN ROC CLASS
# useful call: coxph(formula = Surv(time, status) ~ age + sex + age:sex, data = lung)
# assume formula takes form: (response~variable + <all covariates>), so have to manually input cross terms
lehmann_roc <- function(formula, data, cov_vals=NULL){
#turn first term of formula into a Surv object
formula = as.formula(paste("Surv(", formula[2], ") ~", formula[3]))
ph <- survival::coxph(formula, data)
betas <- coef(ph)
cov <- vcov(ph)
# discard unnecessary betas and rows/cols in covariance matrix
main_var <- names(betas)[1]
ls <- get_needed(betas, cov, main_var)
betas = ls$betas
cov = ls$cov
no_cov <- FALSE
if(length(betas) == 1){
no_cov <- TRUE
}
# if there are no covariates, lehmann_roc should return
# numbers, not functions
if (no_cov){
theta <- exp(betas[[main_var]])
var_theta <- variance_theta_no_cov(betas[[main_var]], cov[1])
auc <- auc(theta)
var_auc <- variance_auc(theta, var_theta)
#these are functions
partial_auc <- partial_auc(theta)
var_partial_auc <- variance_partial_auc(theta, var_theta)
roc <- roc(theta)
} else {
# these are all functions
theta <- get_theta(betas, main_var)
var_theta <- variance_theta(betas, cov, main_var)
auc <- auc
var_auc <- variance_auc
partial_auc <- partial_auc
var_partial_auc <- variance_partial_auc
roc <- roc
#if a list of covariates is provided, apply them to the functions
if (length(cov_vals == 0)){
theta <- theta(cov_vals)
var_theta <- var_theta(cov_vals)
auc <- auc(theta)
var_auc <- var_auc(theta, var_theta)
partial_auc <- partial_auc(theta)
var_partial_auc <- var_partial_auc(theta, var_theta)
}
}
# RETURN LEHMANN_ROC OBJECT
value <- list(theta=theta, var_theta=var_theta, auc=auc, var_auc=var_auc, partial_auc=partial_auc, var_partial_auc=var_partial_auc, roc=roc)
attr(value, "class") <- "lehmann_roc"
return(value)
}
# override default print function
print.lehmann_roc <- function(obj){
stopifnot(class(obj) == "lehmann_roc") # make sure obj is a lehmann_roc object
cat("Theta:", obj$theta, "\n")
cat("Variance of theta:", obj$var_theta, "\n")
cat("AUC:", obj$auc, "\n")
cat("Variance of AUC:", obj$auc, "\n")
}
# override default plot function
plot.lehmann_roc <- function(obj){
stopifnot(class(obj) == "lehmann_roc")
plot(obj$roc$FPR, obj$roc$TPR, main="Lehmann ROC Curve") # maybe add auc in text box
}
# Returns list of betas and covariance matrix without unnecessary variables
get_needed <- function(betas, cov, main_var){
beta_list = list()
for (label in labels(betas)){
if (grepl(main_var, label, fixed=TRUE)){
beta_list = c(beta_list, betas[label])
}
}
needed_names = labels(beta_list)
new_cov = cov[needed_names, needed_names]
return(list(betas=beta_list, cov=new_cov))
}
get_theta <- function(betas, main_var){
theta <- function(covariates){
stopifnot(typeof(covariates) == "list")
total_exponent = betas[[main_var]]
betas = betas[2:length(betas)]
for (beta_name in names(betas)){
total_cov = 1
for (cov_name in names(covariates)){
if (cov_name != main_var & grepl(cov_name, beta_name, fixed=TRUE)){
total_cov = total_cov * covariates[[cov_name]]
}
}
total_exponent = total_exponent + total_cov*betas[[beta_name]]
}
return(exp(total_exponent))
}
return(theta)
}
variance_theta_no_cov <- function(beta, beta_variance){
return(exp(2*beta)*beta_variance)
}
variance_theta <- function(betas, cov, main_var){
variance <- function(covariates){
get_formula <- function(){
formula_string <- "~x1"
count <- 2
betas <- betas[2:length(betas)]
for (beta_name in names(betas)){
total_cov <- 1
for (cov_name in names(covariates)){
if (cov_name != main_var & grepl(cov_name, beta_name, fixed=TRUE)){
total_cov <- total_cov * covariates[[cov_name]]
}
}
formula_string <- sprintf("%s + %f*x%i", formula_string, total_cov, count)
count <- count + 1
}
formula <- as.formula(formula_string)
formula <- update(formula, ~exp(.))
return(formula)
}
formula = get_formula()
print(formula)
print("Betas:")
print(betas)
print("Cov")
print(cov)
se <- msm::deltamethod(formula, betas, cov)
return(se^2)
}
}
auc <- function(theta){
return((theta+1)^(-1))
}
variance_auc <- function(theta, variance_theta){
return((theta+1)^(-4)*variance_theta)
}
partial_auc <- function(theta){
integrand <- function(x){
return((theta+1)^(-1)*x^(theta+1))
}
auc_to <- function(x0){
return(integrate(integrand, lower=0, upper=x0))
}
return(auc_to)
}
variance_partial_auc <- function(theta, variance_theta){
variance_to <- function(x0){
outside_brackets <- (x0^(theta+1)/(theta+1))^2
first_term <- (x0^theta*log(x0))^2*variance_theta/(x0^(theta+1))^2
second_term <- variance_theta/(theta+1)^2
third_term <- -2*x0^(theta+1)*log(x0)*variance_theta/(x0^(theta+1)*(theta+1))
inside_brackets = first_term + second_term + third_term
return(outside_brackets*inside_brackets)
}
return(variance_to)
}
roc <- function(theta){
FPR <- seq(0, 1, 0.01)
TPR <- FPR^theta
return(list(FPR=FPR, TPR=TPR))
}
roc_variance <- function(x, theta, variance_theta){
return((x^theta*log(x))^2*variance_theta)
}
l <- lehmann_roc(time~age*sex*wt.loss,data=lung,cov_vals=list(sex=1,wt.loss=14))
library(survival)
library(survminer)
data(lung)
l <- lehmann_roc(time~age*sex*wt.loss,data=lung,cov_vals=list(sex=1,wt.loss=14))
library(msm)
l <- lehmann_roc(time~age*sex*wt.loss,data=lung,cov_vals=list(sex=1,wt.loss=14))
# LEHMANN ROC CLASS
# useful call: coxph(formula = Surv(time, status) ~ age + sex + age:sex, data = lung)
# assume formula takes form: (response~variable + <all covariates>), so have to manually input cross terms
lehmann_roc <- function(formula, data, cov_vals=NULL){
#turn first term of formula into a Surv object
formula = as.formula(paste("Surv(", formula[2], ") ~", formula[3]))
ph <- survival::coxph(formula, data)
betas <- coef(ph)
cov <- vcov(ph)
# discard unnecessary betas and rows/cols in covariance matrix
main_var <- names(betas)[1]
ls <- get_needed(betas, cov, main_var)
betas = ls$betas
cov = ls$cov
no_cov <- FALSE
if(length(betas) == 1){
no_cov <- TRUE
}
# if there are no covariates, lehmann_roc should return
# numbers, not functions
if (no_cov){
theta <- exp(betas[[main_var]])
var_theta <- variance_theta_no_cov(betas[[main_var]], cov[1])
auc <- auc(theta)
var_auc <- variance_auc(theta, var_theta)
#these are functions
partial_auc <- partial_auc(theta)
var_partial_auc <- variance_partial_auc(theta, var_theta)
roc <- roc(theta)
} else {
# these are all functions
theta <- get_theta(betas, main_var)
var_theta <- variance_theta(betas, cov, main_var)
auc <- auc
var_auc <- variance_auc
partial_auc <- partial_auc
var_partial_auc <- variance_partial_auc
roc <- roc
#if a list of covariates is provided, apply them to the functions
if (length(cov_vals == 0)){
theta <- theta(cov_vals)
var_theta <- var_theta(cov_vals)
auc <- auc(theta)
var_auc <- var_auc(theta, var_theta)
partial_auc <- partial_auc(theta)
var_partial_auc <- var_partial_auc(theta, var_theta)
}
}
# RETURN LEHMANN_ROC OBJECT
value <- list(theta=theta, var_theta=var_theta, auc=auc, var_auc=var_auc, partial_auc=partial_auc, var_partial_auc=var_partial_auc, roc=roc)
attr(value, "class") <- "lehmann_roc"
return(value)
}
# override default print function
print.lehmann_roc <- function(obj){
stopifnot(class(obj) == "lehmann_roc") # make sure obj is a lehmann_roc object
cat("Theta:", obj$theta, "\n")
cat("Variance of theta:", obj$var_theta, "\n")
cat("AUC:", obj$auc, "\n")
cat("Variance of AUC:", obj$auc, "\n")
}
# override default plot function
plot.lehmann_roc <- function(obj){
stopifnot(class(obj) == "lehmann_roc")
plot(obj$roc$FPR, obj$roc$TPR, main="Lehmann ROC Curve") # maybe add auc in text box
}
# Returns list of betas and covariance matrix without unnecessary variables
get_needed <- function(betas, cov, main_var){
beta_list = list()
for (label in labels(betas)){
if (grepl(main_var, label, fixed=TRUE)){
beta_list = c(beta_list, betas[label])
}
}
needed_names = labels(beta_list)
new_cov = cov[needed_names, needed_names]
return(list(betas=beta_list, cov=new_cov))
}
get_theta <- function(betas, main_var){
theta <- function(covariates){
stopifnot(typeof(covariates) == "list")
total_exponent = betas[[main_var]]
betas = betas[2:length(betas)]
for (beta_name in names(betas)){
total_cov = 1
for (cov_name in names(covariates)){
if (cov_name != main_var & grepl(cov_name, beta_name, fixed=TRUE)){
total_cov = total_cov * covariates[[cov_name]]
}
}
total_exponent = total_exponent + total_cov*betas[[beta_name]]
}
return(exp(total_exponent))
}
return(theta)
}
variance_theta_no_cov <- function(beta, beta_variance){
return(exp(2*beta)*beta_variance)
}
variance_theta <- function(betas, cov, main_var){
variance <- function(covariates){
get_formula <- function(){
formula_string <- "~x1"
count <- 2
new_names = "x1"
betas_copy <- betas
betas_copy <- betas_copy[2:length(betas)]
for (beta_name in names(betas_copy)){
total_cov <- 1
for (cov_name in names(covariates)){
if (cov_name != main_var & grepl(cov_name, beta_name, fixed=TRUE)){
total_cov <- total_cov * covariates[[cov_name]]
}
}
new_names = c(new_names, paste("x", count, sep=""))
betas[[beta_name]] = betas[[beta_name]]*total_cov
formula_string <- sprintf("%s + x%i", formula_string, count)
count <- count + 1
}
names(betas) = make.names(new_names)
rownames(cov) = make.names(new_names)
colnames(cov) = make.names(new_names)
print(betas)
print(cov)
formula <- as.formula(formula_string)
formula <- update(formula, ~exp(.))
return(formula)
}
formula = get_formula()
print(formula)
print(betas)
print(cov)
se <- msm::deltamethod(formula, betas, cov)
return(se^2)
}
}
auc <- function(theta){
return((theta+1)^(-1))
}
variance_auc <- function(theta, variance_theta){
return((theta+1)^(-4)*variance_theta)
}
partial_auc <- function(theta){
integrand <- function(x){
return((theta+1)^(-1)*x^(theta+1))
}
auc_to <- function(x0){
return(integrate(integrand, lower=0, upper=x0))
}
return(auc_to)
}
variance_partial_auc <- function(theta, variance_theta){
variance_to <- function(x0){
outside_brackets <- (x0^(theta+1)/(theta+1))^2
first_term <- (x0^theta*log(x0))^2*variance_theta/(x0^(theta+1))^2
second_term <- variance_theta/(theta+1)^2
third_term <- -2*x0^(theta+1)*log(x0)*variance_theta/(x0^(theta+1)*(theta+1))
inside_brackets = first_term + second_term + third_term
return(outside_brackets*inside_brackets)
}
return(variance_to)
}
roc <- function(theta){
FPR <- seq(0, 1, 0.01)
TPR <- FPR^theta
return(list(FPR=FPR, TPR=TPR))
}
roc_variance <- function(x, theta, variance_theta){
return((x^theta*log(x))^2*variance_theta)
}
l <- lehmann_roc(time~age*sex*wt.loss,data=lung,cov_vals=list(sex=1,wt.loss=14))
# LEHMANN ROC CLASS
# useful call: coxph(formula = Surv(time, status) ~ age + sex + age:sex, data = lung)
# assume formula takes form: (response~variable + <all covariates>), so have to manually input cross terms
lehmann_roc <- function(formula, data, cov_vals=NULL){
#turn first term of formula into a Surv object
formula = as.formula(paste("Surv(", formula[2], ") ~", formula[3]))
ph <- survival::coxph(formula, data)
betas <- coef(ph)
cov <- vcov(ph)
# discard unnecessary betas and rows/cols in covariance matrix
main_var <- names(betas)[1]
ls <- get_needed(betas, cov, main_var)
betas = ls$betas
cov = ls$cov
no_cov <- FALSE
if(length(betas) == 1){
no_cov <- TRUE
}
# if there are no covariates, lehmann_roc should return
# numbers, not functions
if (no_cov){
theta <- exp(betas[[main_var]])
var_theta <- variance_theta_no_cov(betas[[main_var]], cov[1])
auc <- auc(theta)
var_auc <- variance_auc(theta, var_theta)
#these are functions
partial_auc <- partial_auc(theta)
var_partial_auc <- variance_partial_auc(theta, var_theta)
roc <- roc(theta)
} else {
# these are all functions
theta <- get_theta(betas, main_var)
var_theta <- variance_theta(betas, cov, main_var)
auc <- auc
var_auc <- variance_auc
partial_auc <- partial_auc
var_partial_auc <- variance_partial_auc
roc <- roc
#if a list of covariates is provided, apply them to the functions
if (length(cov_vals == 0)){
theta <- theta(cov_vals)
var_theta <- var_theta(cov_vals)
auc <- auc(theta)
var_auc <- var_auc(theta, var_theta)
partial_auc <- partial_auc(theta)
var_partial_auc <- var_partial_auc(theta, var_theta)
}
}
# RETURN LEHMANN_ROC OBJECT
value <- list(theta=theta, var_theta=var_theta, auc=auc, var_auc=var_auc, partial_auc=partial_auc, var_partial_auc=var_partial_auc, roc=roc)
attr(value, "class") <- "lehmann_roc"
return(value)
}
# override default print function
print.lehmann_roc <- function(obj){
stopifnot(class(obj) == "lehmann_roc") # make sure obj is a lehmann_roc object
cat("Theta:", obj$theta, "\n")
cat("Variance of theta:", obj$var_theta, "\n")
cat("AUC:", obj$auc, "\n")
cat("Variance of AUC:", obj$auc, "\n")
}
# override default plot function
plot.lehmann_roc <- function(obj){
stopifnot(class(obj) == "lehmann_roc")
plot(obj$roc$FPR, obj$roc$TPR, main="Lehmann ROC Curve") # maybe add auc in text box
}
# Returns list of betas and covariance matrix without unnecessary variables
get_needed <- function(betas, cov, main_var){
beta_list = list()
for (label in labels(betas)){
if (grepl(main_var, label, fixed=TRUE)){
beta_list = c(beta_list, betas[label])
}
}
needed_names = labels(beta_list)
new_cov = cov[needed_names, needed_names]
return(list(betas=beta_list, cov=new_cov))
}
get_theta <- function(betas, main_var){
theta <- function(covariates){
stopifnot(typeof(covariates) == "list")
total_exponent = betas[[main_var]]
betas = betas[2:length(betas)]
for (beta_name in names(betas)){
total_cov = 1
for (cov_name in names(covariates)){
if (cov_name != main_var & grepl(cov_name, beta_name, fixed=TRUE)){
total_cov = total_cov * covariates[[cov_name]]
}
}
total_exponent = total_exponent + total_cov*betas[[beta_name]]
}
return(exp(total_exponent))
}
return(theta)
}
variance_theta_no_cov <- function(beta, beta_variance){
return(exp(2*beta)*beta_variance)
}
variance_theta <- function(betas, cov, main_var){
variance <- function(covariates){
get_formula <- function(){
formula_string <- "~x1"
count <- 2
betas <- betas[2:length(betas)]
for (beta_name in names(betas)){
total_cov <- 1
for (cov_name in names(covariates)){
if (cov_name != main_var & grepl(cov_name, beta_name, fixed=TRUE)){
total_cov <- total_cov * covariates[[cov_name]]
}
}
formula_string <- sprintf("%s + %f*x%i", formula_string, total_cov, count)
count <- count + 1
}
formula <- as.formula(formula_string)
formula <- update(formula, ~exp(.))
return(formula)
}
formula = get_formula()
print(formula)
print("Betas:")
print(betas)
print("Cov")
print(cov)
se <- msm::deltamethod(formula, betas, cov)
return(se^2)
}
}
auc <- function(theta){
return((theta+1)^(-1))
}
variance_auc <- function(theta, variance_theta){
return((theta+1)^(-4)*variance_theta)
}
partial_auc <- function(theta){
integrand <- function(x){
return((theta+1)^(-1)*x^(theta+1))
}
auc_to <- function(x0){
return(integrate(integrand, lower=0, upper=x0))
}
return(auc_to)
}
variance_partial_auc <- function(theta, variance_theta){
variance_to <- function(x0){
outside_brackets <- (x0^(theta+1)/(theta+1))^2
first_term <- (x0^theta*log(x0))^2*variance_theta/(x0^(theta+1))^2
second_term <- variance_theta/(theta+1)^2
third_term <- -2*x0^(theta+1)*log(x0)*variance_theta/(x0^(theta+1)*(theta+1))
inside_brackets = first_term + second_term + third_term
return(outside_brackets*inside_brackets)
}
return(variance_to)
}
roc <- function(theta){
FPR <- seq(0, 1, 0.01)
TPR <- FPR^theta
return(list(FPR=FPR, TPR=TPR))
}
roc_variance <- function(x, theta, variance_theta){
return((x^theta*log(x))^2*variance_theta)
}
l <- lehmann_roc(time~age*sex*wt.loss,data=lung,cov_vals=list(sex=1,wt.loss=14))
